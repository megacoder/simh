// FOR
*LIST SOURCE PROGRAM
*ONE WORD INTEGERS
C ICMPC - COMPARE CARDX TO CARD. IF CARDX > CARD, RETURN + VALUE.
C         IF CARDX < CARD, RETURN - VALUE. IF EQUAL, RETURN 0.

      FUNCTION ICMPC (IDUMY)
      INTEGER IREC(1), CARD(40), CARDX(40)
      COMMON IFROM, ITO, NREC, CARD, CARDX, JREC, IREC

      DO 10 I = IFROM, ITO
         ICMPC = CARDX(I) - CARD(I)
         IF (ICMPC) 20, 10, 20
  10  CONTINUE
  20  RETURN
      END
// DUP
*DELETE             ICMPC
*STORE      WS  UA  ICMPC
// FOR
*LIST SOURCE PROGRAM
*ONE WORD INTEGERS
C CSORT - SORT THE FILE BY CARD INDEX.

      SUBROUTINE CSORT
      INTEGER IREC(1), CARD(40), CARDX(40)
      COMMON IFROM, ITO, NREC, CARD, CARDX, JREC, IREC

c     --- INSERTION SORT -- SORT ITEM I INTO THE LIST
      DO 70 I = 2, NREC
         JREC = IREC(I)
         READ(5'JREC) CARD

c        --- COMPARE ITEM I TO ITEMS 1 .. I-1
         I1 = I-1
         DO 60 J = 1, I1
             JREC = IREC(J)
             READ(5'JREC) CARDX
             JJ = ICMPC(0)
             IF (JJ) 50, 50, 10
C                --- CARDX IS GREATER THAN CARD, SO INSERT CARD I BEFORE CARD J
   10            IRECI = IREC(I)
                 JJ = I
   20            CONTINUE
                    IREC(JJ) = IREC(JJ-1)
                    JJ = JJ-1
                 IF (JJ-J) 30, 30, 20
   30            IREC(J) = IRECI
                 GOTO 70
   50        CONTINUE
   60    CONTINUE
   70 CONTINUE
      RETURN
      END
// DUP
*DELETE             CSORT
*STORE      WS  UA  CSORT
// FOR
*LIST SOURCE PROGRAM
*IOCS(1132 PRINTER,CARD,DISK)
*ONE WORD INTEGERS
c CSORT - SORT INPUT CARDS ALPHABETICALLY
c
c INPUT CARDS ARE STORED IN A TEMPORARY FILE USING UNFORMATTED IO.
c END OF INPUT IS INDICATED BY A CARD STARTING WITH '*END'. CARDS
C ARE STORED FROM COLUMNS IFROM TO ITO. NOTE -- IFROM MUST BE ODD, AND
C ITO MUST BE EVEN.
c
c WE THEN SORT AN ARRAY OF INTEGERS REPRESENTING THE RECORD NUMBERS
c AND PRINT THE RESULTS OUT IN ORDER. THE MAXIMUM NUMBER OF RECORDS
C IS 500

      INTEGER IREC(500), CARD(40), CARDX(40)
      COMMON IFROM, ITO, NREC, CARD, CARDX, JREC, IREC
      DEFINE FILE 5(500,40,U,JREC)
      DATA IEND1, IEND2, IEND3 /'*E','ND','  '/
      MXREC = 500
      NREC  = 0

C - SORTING COLUMNS
      IFROM = 1
      ITO   = 80

C - DEAL WITH A2 FORMAT
      IFROM = (IFROM+1)/2
      ITO   = ITO/2

      WRITE(3,5)
    5 FORMAT('1INPUT CARDS...')

C     --- READ NEXT CARD
   10 READ (2,20) CARD
   20 FORMAT(40A2)
      WRITE (3,25) CARD
   25 FORMAT(1X, 40A2)

C     --- IF IT'S THE END CARD, GO TO LINE 60
      IF (CARD(1) - IEND1) 50, 30, 50
   30 IF (CARD(2) - IEND2) 50, 40, 50
   40 IF (CARD(3) - IEND3) 50, 60, 50

C     --- STORE THE DATA CARD. IF ARRAY IS NOT FULL, GO BACK FOR MORE
   50 NREC = NREC+1
      IREC(NREC) = NREC
      WRITE(5'NREC) CARD
      IF (MXREC-NREC) 60, 60, 10

c     --- QUIT IF CARD COUNT IS 0, SKIP SORT IF CARD COUNT IS 1
   60 IF (NREC-1) 999, 90, 70

C     --- SORT THE CARD INDEXES
   70 CALL CSORT

      WRITE(3,80)
   80 FORMAT('1SORTED DATA...')

C     --- READ THE CARDS BACK IN ORDER AND PRINT
   90 DO 100 I = 1, NREC
          IR = IREC(I)
          READ(5'IR) CARD
          WRITE(3,25) CARD
  100 CONTINUE

  999 CALL EXIT
      END
// XEQ
FFF THIS IS CARD 1
BBB THIS IS CARD 2
AAA THIS IS CARD 3
DDD THIS IS CARD 4
CCC THIS IS CARD 5
*END
